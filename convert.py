
from typing import List, Dict

import datetime


def convert_to_dynamodb_documents(
        user_id: int,  # id юзера - от 1 до 1_000_000
        day: datetime.date,  # день, за который нужно записать данные в базу
        activity_scores: List[int]  # список ровно из 2880 значений activity_scores,
        # каждая из которых записана с интервалом в 30 секунд
        # с начала дня по UTC
) -> List[Dict]:
    """
    Храним блоками по 4 часа.
    Т.к. значения в интервале от 1 до 99, мы можем упаковать 2 значения в одно двухбайтовое число.
    Итого, за час ожидаем 1440 (2880 / 2) значений в списке, объем хранимых данных на 4-х часовой блок:
        3 байта на id + 5 байт на timestamp + (1 + 1440 * 2 + 1440 + 3) * 4 на список = 17304 байт
        с округлением вверх получаем блок в 17Кб.
        Оценка стоимости запросов:
            запись: 102 WRU = 17 WRU (17 КБ) * 6 документов
            чтение: 25 RRU
                1 час: 5 RRU (17 КБ) - выбираем из 4-х часового куска нужный диапазон.
                12 часов: - в худшем случае нам потребуется выбрать четыре 4-х часовых диапазона (если повезет, то три)
                    4 документа * 5 (17 КБ / 4 КБ с округлением вверх) RRU = 20 RRU
        Итого (на 1 млн пользователей): 102 * 1.25 + 25 * 0.25 = 133.75
    :param user_id:
    :param day:
    :param activity_scores:
    :return:
    """
    result = []
    for i in range(6):  # Шесть 4-х часовых блоков
        _t = int(day.strftime("%s")) + 3600 * 4 * i
        result.append(
            {
                'u': user_id,
                't': _t,
                'v': [
                    activity_scores[i] * 128 + activity_scores[i + 1]  # упаковываем 2 значения в одно
                    for i in range(2880 * 4 * i, 2880 * 4 * (i + 1), 2)
                ],
            }
        )
    return result
